생활코딩 web2 - Node.js
📓️ 문서/exercise/생활코딩/web1_html_internet

🐾️Node.js - 1. 수업 소개
  사람이 직접 html을 타이핑하여 만들어야했다 -> 하나하나의 html구조를 바꾸려면 일일히 수정이 필요
  유저와의 상호작용도 힘들어짐, 성장의 한계에 봉착!
  이미 js에 익숙한 web개발자들이 새로운 컴퓨터 언어를 배우지 않고도 자동으로 서버쪽(server side Application) web을 만들고싶어함 -> nodejs등장! -> 버전업이 되면서 웹 브라우저가 아닌 컴퓨터 자체를 통제하기 시작함!
  
  node js를 통제함으로서 컨텐츠를 생산하는 공장장이 되어보자

🐾️Node.js - 5. Node.js로 웹서버 만들기 : https://opentutorials.org/module/3549/21032
  Node.js는 Apache와 같이 웹서버로도 사용할 수 있다. 왜냐하면, 웹서버 기능을 내장하고 있기 때문에!
  그러한 특성을 이용하면 Apache웹서버로 할 수 없는 일을 할수 있다!
  console.log(__dirname + url);
  url을 뭘 넣느냐에따라서 바뀜. -> apache에서는 불가능함.(프로그래밍적으로 사용자에게 전송내용을 바꿈)


🐾️Node.js - 9. URL의 이해
  http: opentutorials.org:3000/main?id=HTML?page=12
  http - > 통신 규칙 : 웹 브라우저와 웹 서버가 데이터를 주고받기 위해서 만든 통신 규칙!
  opentutorials.org -> host(domain), 인터넷에 연결되어있는 컴퓨터를 나타내는 주소!
  3000 -> port, 한대의 컴퓨터 안에 여러대의 서버가 있을 수 있음, 클라이언트는 어느서버로 접속할것인가?(cf: 기본은 80번)
  /main -> path, 어떤 경로의 파일인가?
  ?id=HTML?page=12 -> query string : 쿼리 스트링의 값을 변경하면 웹서버에게 데이터를 전달 가능!
     쿼리스트링의 시작은 ?로 하기로 약속되어있다!!
 

🐾️Node.js - 10. URL을 통해서 입력된 값 사용하기
  http://localhost/?id=HTML
    : ? 이후엔 query string 이라고 함!

🐾️Node.js - 11. App제작 - 동적인 웹페이지 만들기
  `${}`을 이용한 html동적생성에 대한 수업

🐾️Node.js - 12. Node.js의 파일 읽기 기능
  CRUD - Create, Read, Update, Delete : 네가지의 처리가 정보를 다루는 핵심적인 처리방법!
  file 을 어떻게 하면 node.js로 읽을 수 있을것인가? 생성, 수정, 삭제를 Node js로 하기!
  검색 키워드 : nodejs file read : 검색을 통하여 nodeJs공식홈페이지에서 fs.readFile을 타이핑해봄!
  fs.readFile('sample.txt', 'utf-8', (err,data)=>{console.log(data);});
  

🐾️Node.js - 13. App 제작 - 파일을 이용해 본문 구현
  fs.readFile을 이용하여 클릭시 본문 내용을 바꾸는 수업


🐾️Node.js - 18. NodeJs콘솔에서의 입력값 : syntax/conditaional.js
  I/O
  input
    Parameter : 입력되는 정보의 형식 
    Argument : 실제로 받은 값!
  Output
  
  Input과 Output에는 여러가지 종류가 있다.
  Console에서 입력값을 주는방법?
  nodejs console input parameters
  
  process.argv명령어를 통해 Node실행시 node정보, 실행 파일정보, console입력값을 받을수있다.
  입력값을 활용하여 더 확장적인 console활용과 프로그래밍이 가능하다!


🐾️Node.js - 19.1. App제작 - Not found 구현
  const pathName = url.parse(_url, true).pathname;
  pathName을 활용한 404 구현!
  path가 root('/')를 벗어나면 response.end(404)로 구현함 

🐾️Node.js - 19.2. App제작- 홈페이지 구현
   fs.readFile은 queryData를 통해 불러오는데, 이 파일이 Undefined라면 홈페이지(따로구현되어있지 않음)이므로, title과 description을 따로 할당해주는 형식으로 홈페이지를 구현함

🐾️Node.js - 23. Node.js에서 파일목록 알아내기
  google : nodejs file list in directory
  💪️fs.readdir
  const testFolder = './tests/';
  const fs = require('fs');
  
  fs.readdir(testFolder, (err, files) => {
    files.forEach(file => {
      console.log(file);
    });
  });

  📓️nodejs/readdir.js
  
  
🐾️Node.js - 24. App 제작 - 글목록 출력하기
  앞서 수업에서 학습했던 fs.readdir를 통해 파일 목록을 받아와, a태그와 파일 리스트를 template literal을 통해 html태그로 출력함!

🐾️Node.js - 26. App 제작 - 함수를 이용해서 정리정돈하기
  기능단위로 function을 분리하여 코드 중복을 줄이고 심플하게 만듬!

🐾️Node.js - 27. 수업의 정상
  Js로 Node.js의 기능을 제어하여, Web Application을 구동시켜보았음!

🐾️Node.js - 28.1. Nodejs에서 동기와 비동기1(Synchronous & asychronous)
  동기적인 방식 : 한가지 일을 끝날때 까지 기다렸다가 처리
  비동기적 방식 : 병렬적으로 진행! - 효율적이지만, 매우 복잡함!

🐾️Node.js - 28.2. Nodejs에서 동기와 비동기2
  Node.js 공식문서에서의 예시
    fs.readFile(path[,options], callback)
    fs.readFileSync(path[,options]) : callback이 없음!
    이 두가지의 차이를 통해 동기와 비동기를 알아보자!
    📓️syntax/sync.js

  //readFileSync
  console.log('A');
  //파일 경로는 현재 이 파일이 아니라, node의 실행위치에 따라 갈린다!
  const result = fs.readFileSync('syntax/sample.txt' , 'utf8');
  console.log(result);
  console.log('C')
  // ABC

  // Sync가 있으면 동기적인 처리, Sync가 없으면 비동기적인 처리!
  // -> NodeJs는 비동기적인 처리를 선호하는것을 알 수 있음~! 
  // + 동기적 방식은 retrun 값이 있지만, 비동기적인 방식은 return값이 없음!
  console.log('A');
  fs.readFile('syntax/sample.txt' , 'utf8', (err, result)=>{
      //두번째 param부터 파일의 내용을 제공하도록 약속되어있음!
      console.log(result);
  });
  console.log('C');
  // ACB
  

🐾️Node.js - 28.3. JavaScript-callback
  앞서 작업 후 추후에 실행하라는 함수!
  📓️syntax/callback.js

🐾️Node.js - 29. Node.js의 패키지 매니저와 PM2
  Package Manager -> sw들을 설치, 관리, 업데이트, 삭제해주는 프로그램!
  NPM : nodeJs에서 가장 광범위하게 사용하고 있는 패키지 매니저!
  
  PM2 : production process manager for Node.js
  PM2를 이용하면 실행중인 프로그램(node js로 만든 프로그램 - main.js)을 꺼지면 다시켜줌, pm2가 파일이 수정이 되는지 관찰하고잇다가 파일을 수정하면 껐다가 다시 켜주기도함!!! - Nodemone같은 친구인듯!
  npm install pm2 -g
  pm2 start app.js
  로 시키면됨!
  pm2 start main.js
z  
  pm2 monit 를 실행시키면 pm2로 실행되고 있는 프로그램들이 보임!
  pm2 list 를 하면 실행중인 리스트가 보이고, name을 확인하여 pm2 [name] stop하면 꺼짐

  pm2 start main.js --watch
  이렇게 실행하면 파일이 수정 될 때 마다 재실행됨!
  pm2 log -> 문제점이 있다면 문제점을 바로 보여줌!

🐾️Node.js - 31. App제작 - 글생성 UI만들기
  새로운 patchName 을만들었고, 클릭하여 주소 변경 시 UI를 만듬!

🐾️Node.js - 32. App제작 - POST방식으로 전송된 데이터 받기
  post방식으로 사용자가 전송한 값을 어떻게 받을것인가?
  google : nodejs post data
  
  const qs = require('querystring');

  function(request, response){
    if(request.method === 'POST'){
      let body = '';

      // 웹 브러우저가 Post 방식으로 데이터를 전송 할 때 데이터가 엄청나게 많으면 데이터를 한번에 처리할 때 무리가 있을 수 있다.
      // 따라서 nodeJs에서는 post 전송방식의 데이터가 많을 것을 대비하여 아래의 사용방법을 제공하고있다.
      // 조각조각의 데이터들을 서버에서 수신할 때 마다 콜백함수를 호출하도록 약속되어있다. 또한, data라는 인자를 통하여 수신하도록 약속되어있다.
      request.on('data', (data) => {
        body += data;
        if(body.length > 1e6) request.connection.destroy();
        //이렇게 전송된 데이터가 너무 크다면 요청을 끊어버리는 코드(일종의 보안장치), 없어도 무방
      }
      // 정보가 조각조각 들어오다가 수신이 완료되면 end 가 호출!
      request.on('end', () =>{
        const post = qs.pase(body);
        // 모듈의 함수 중 parse라는 함수에다가 지금까지 저장한 body를 입력값으로 주면 post정보를 줄것이다!
        const title = post.title;//(설정한 input tag 의 Name 으로 들어옴!)
      });
    }
  }

🐾️Node.js - 33. App제작 - 파일 생성과 리다이렉션
  😁️파일생성
  Google : fs.writeFile(file,data[,options],callback) //options는 utf8!
  fs.writeFile('message.txt;,'Hello Node js',(error)=>{
    if(error) throw err;
    console.log('The file has heen saved!);
  });

  😁️리다이렉션
  //302번 -> 페이지를 리다이렉션 시킴!
  response.writeHead(302, {Location: `/?id=${title}`});
  response.end();
  

🐾️Node.js - 34. App제작 - 글수정- 수정링크 생성
  수정이 필요한 상황에서만 a태그를 나타냄! -> 설계시부터 상황에 따른 분류가 아주 중요해보인다.
  
🐾️Node.js - 35. App제작 - 글수정- 수정할 정보 전송
  화면을 만들기 위해 필요한 것 두가지
    1. form
    2. form에 수정하고자 하는 데이터를 불러와야하기때문에 read기능 또한 필요
   수정 form생성! -> * input type hidden의 필요성!

🐾️Node.js - 36. App제작 - 파일명 변경, 내용 저장
   Google : nodeJS file rename!
   fs.rename(oldPath, newPath, callback)

🐾️Node.js - 37. App제작 - 글삭제- 삭제버튼 구현
  삭제의 경우 절대 get 방식으로 구현되서는 안됨!!!
  form태그로 만들어 id를 submit 해주면 title을 id로 받아 삭제하는 기능을 만들것이다.
  이 경우 form태그의 Onsubmit기능을 이용해 js코드를 삽입할 수 있으므로 추후 다시한번 확인하는 기능을 넣을 수 도 있을것이다.

🐾️Node.js - 38. App제작 - 글삭제 기능 완성
  Google : nodejs delete file
  fs.unlik('path/file.txt', (err) => {
    if(err) throw err;
    console.log('path/file.txt was delete');
  });


🐾️Node.js - 42. JavaScript- 객체 - 데이터와 처리방법을 담는 그릇으로서 객체
  obj를 써서의 data는 하나의 하드디스크에 데이터를 밀어넣은것과 비슷한데, object를 쓴다면 폴더기능을 만든것과 비슷함

🐾️Node.js - 43. App제작 - 템플릿 기능 정리정돈하기
  만들뒀던 function들을 object를 통해 정리함!
  리펙토링의 필요성 -> 일단 짜고, 추후에 고치는것 부터 시작하자.
  시작부터 완벽할순 없음!

🐾️Node.js - 44. Node.js 모듈의 형식
  Module이란 무엇인가?
  📓️node.js/muse.js
  📓️node.js/mpart.js
  
  module.exports = M;
  module이라고 하는 약속된 객체!
  M이 가르키는 것을 파일 밖에서 사용 할 수 있게 해주겠다는 약속!
  
  모듈을 가져올때는 require~!!
  
🐾️Node.js - 45. App제작 - 모듈의 활용
  코드를 모듈화하여 require하여 사용!

🐾️Node.js - 46. App제작 - 입력정보에 대한 보안
  Goole: noejs path parse
  path.parse('/home/user/dir/file.txt');
  // Return : {root: '/', dir:'/home/user/dir', base:'file.txt', ext :'.txt', name:'file'}
  -> base 를 쓰면 경로 세탁의 정보가 들어옴!!!!  

  사용자에게서 들어오는 경로 정보와 출력되는 경로정보는 모두 의심할 필요가 있음!!!!!!
  const path = require('path');
  const filteredId = path.parse(queryData.id).base;
  //경로정보에는 filteredId를 넣어야함!

  readFile과 삭제 id 정보 모두 filter!처리함!

🐾️Node.js - 47.1 App제작 - 출력정보에 대한 보안
  XSS : Cross Site Scripting
  script태그를 삽입함으로서 일어 날 수 있는 보안문제!
  해결방법
    1. 직접 열어서 script를 지워버림
    2. 꺽쇄를 웹브라우저에 표시함! -> HTML entyties
  만들어진 모듈을 사용 할 수 있음!
  
🐾️Node.js - 47.2 App제작 - 출력정보에 대한 보안
  이번 시간의 목표 1. 보안  2. 모듈!(npm install을 통한!)
  key world : npm sanitize html
  sanitize-html 이라는 모듈이 있음
  모듈의 아무거나 쓰는것은 비추천하며, 평판을 보고 이용해야함!
  
  npm init : 프로젝트를 npm으로 관리하기위한 시작!
  package.json생성됨
  이후 (-S(대문자)  입력 필요 : 지금 이 프로젝트에서만 실행할 것이다!)
  npm install -S sanitize-html
  dependencies의존성!! 이걸 설치하면 이 프로젝트가 sanitize-html에 의존한다는것!
  한가지 모듈을 설치해도 여러개가 생기는 이유는, 설치한 모듈이 의존하고 있는 여러가지 모듈이 함께 깔리기 때문이다!


🐾️Node.js - 47.3 App제작 - 출력정보에 대한 보안
  모듈 샤용법은 모듈 안내서에 잘 적혀있다.
  var sanitizeHtml = require('sanitize-html');
  var clean = sanitizeHtml(dirty);

  file을 불러오는 곳에서만 사용하면 됨!
  잘 적용되면 스크립트 태그를 불러오지 않음!
  일반적인 html태그는 없에진 않음. 내용은 살려줌!
  더 디테일한 설정을 보기위해선 모듈 설명서를 정독하면 알수있음.(쉽다고는 하지 않았다^^/)

🐾️Node.js - 48 API와 Create Server
  API : Application Programming Interface
  fs.readFile? node개발자들이 만든거다!!!
  v811.2Document -> node모듈들이 나옴
  모듈의 기능들이 나옴~

  http.createServer ?
  http는 객체이자 통신규약.
  http.createServer([requestListener])-> 대괄호는 생략가능함
  requestListener -> function!
  외부에서 요청이 들어올 때 마다 인자의 함수를 실행시킨다는 것이다.
  첫번째 인자는 request, 두번째 인자는 response
  

  createServer 는 return값으로 http.server를 반환함
  http.server는 ?

  app.listen
  -> server.listen() : Start the HTTP server listening for conections
  This methods is identical to server.listen() from net.Server


🐾️Node.js - 49 부록 - pm2 보충학습



