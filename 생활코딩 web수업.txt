생활코딩 web2 - Node.js

🐾️Node.js - 1. 수업 소개
  사람이 직접 html을 타이핑하여 만들어야했다 -> 하나하나의 html구조를 바꾸려면 일일히 수정이 필요
  유저와의 상호작용도 힘들어짐, 성장의 한계에 봉착!
  이미 js에 익숙한 web개발자들이 새로운 컴퓨터 언어를 배우지 않고도 자동으로 서버쪽(server side Application) web을 만들고싶어함 -> nodejs등장! -> 버전업이 되면서 웹 브라우저가 아닌 컴퓨터 자체를 통제하기 시작함!
  
  node js를 통제함으로서 컨텐츠를 생산하는 공장장이 되어보자

🐾️Node.js - 5. Node.js로 웹서버 만들기 : https://opentutorials.org/module/3549/21032
  Node.js는 Apache와 같이 웹서버로도 사용할 수 있다. 왜냐하면, 웹서버 기능을 내장하고 있기 때문에!
  그러한 특성을 이용하면 Apache웹서버로 할 수 없는 일을 할수 있다!
  console.log(__dirname + url);
  url을 뭘 넣느냐에따라서 바뀜. -> apache에서는 불가능함.(프로그래밍적으로 사용자에게 전송내용을 바꿈)


🐾️Node.js - 9. URL의 이해
  http: opentutorials.org:3000/main?id=HTML?page=12
  http - > 통신 규칙 : 웹 브라우저와 웹 서버가 데이터를 주고받기 위해서 만든 통신 규칙!
  opentutorials.org -> host(domain), 인터넷에 연결되어있는 컴퓨터를 나타내는 주소!
  3000 -> port, 한대의 컴퓨터 안에 여러대의 서버가 있을 수 있음, 클라이언트는 어느서버로 접속할것인가?(cf: 기본은 80번)
  /main -> path, 어떤 경로의 파일인가?
  ?id=HTML?page=12 -> query string : 쿼리 스트링의 값을 변경하면 웹서버에게 데이터를 전달 가능!
     쿼리스트링의 시작은 ?로 하기로 약속되어있다!!
 

🐾️Node.js - 10. URL을 통해서 입력된 값 사용하기
  http://localhost/?id=HTML
    : ? 이후엔 query string 이라고 함!

🐾️Node.js - 11. App제작 - 동적인 웹페이지 만들기
  `${}`을 이용한 html동적생성에 대한 수업

🐾️Node.js - 12. Node.js의 파일 읽기 기능
  CRUD - Create, Read, Update, Delete : 네가지의 처리가 정보를 다루는 핵심적인 처리방법!
  file 을 어떻게 하면 node.js로 읽을 수 있을것인가? 생성, 수정, 삭제를 Node js로 하기!
  검색 키워드 : nodejs file read : 검색을 통하여 nodeJs공식홈페이지에서 fs.readFile을 타이핑해봄!
  fs.readFile('sample.txt', 'utf-8', (err,data)=>{console.log(data);});
  

🐾️Node.js - 13. App 제작 - 파일을 이용해 본문 구현
  fs.readFile을 이용하여 클릭시 본문 내용을 바꾸는 수업


🐾️Node.js - 18. NodeJs콘솔에서의 입력값 : syntax/conditaional.js
  I/O
  input
    Parameter : 입력되는 정보의 형식 
    Argument : 실제로 받은 값!
  Output
  
  Input과 Output에는 여러가지 종류가 있다.
  Console에서 입력값을 주는방법?
  nodejs console input parameters
  
  process.argv명령어를 통해 Node실행시 node정보, 실행 파일정보, console입력값을 받을수있다.
  입력값을 활용하여 더 확장적인 console활용과 프로그래밍이 가능하다!


🐾️Node.js - 19.1. App제작 - Not found 구현
  const pathName = url.parse(_url, true).pathname;
  pathName을 활용한 404 구현!
  path가 root('/')를 벗어나면 response.end(404)로 구현함 

🐾️Node.js - 19.2. App제작- 홈페이지 구현
   fs.readFile은 queryData를 통해 불러오는데, 이 파일이 Undefined라면 홈페이지(따로구현되어있지 않음)이므로, title과 description을 따로 할당해주는 형식으로 홈페이지를 구현함

🐾️Node.js - 23. Node.js에서 파일목록 알아내기
  google : nodejs file list in directory
  💪️fs.readdir
  const testFolder = './tests/';
  const fs = require('fs');
  
  fs.readdir(testFolder, (err, files) => {
    files.forEach(file => {
      console.log(file);
    });
  });

  📓️nodejs/readdir.js
  
  
🐾️Node.js - 24. App 제작 - 글목록 출력하기
  앞서 수업에서 학습했던 fs.readdir를 통해 파일 목록을 받아와, a태그와 파일 리스트를 template literal을 통해 html태그로 출력함!

🐾️Node.js - 26. App 제작 - 함수를 이용해서 정리정돈하기
  기능단위로 function을 분리하여 코드 중복을 줄이고 심플하게 만듬!

🐾️Node.js - 27. 수업의 정상
  Js로 Node.js의 기능을 제어하여, Web Application을 구동시켜보았음!

🐾️Node.js - 28.1. Nodejs에서 동기와 비동기1

🐾️Node.js - 28.2. Nodejs에서 동기와 비동기2

🐾️Node.js - 28.3. JavaScript-callback

🐾️Node.js - 29. Node.js의 패키지 매니저와 PM2

🐾️Node.js - 30. HTML-form

🐾️Node.js - 31. App제작 - 글생성 UI만들기

🐾️Node.js - 32. App제작 - POST방식으로 전송된 데이터 받기

🐾️Node.js - 33. App제작 - 파일 생성과 리다이렉션

🐾️Node.js - 34. App제작 - 글수정- 수정링크 생성

🐾️Node.js - 35. App제작 - 글수정- 수정할 정보 전송

🐾️Node.js - 36. App제작 - 파일명 변경, 내용 저장

🐾️Node.js - 37. App제작 - 글삭제- 삭제버튼 구현

🐾️Node.js - 38. App제작 - 글삭제 기능 완성

🐾️Node.js - 34. App제작 - 글수정- 수정링크 생성






